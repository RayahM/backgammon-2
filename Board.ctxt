#BlueJ class context
comment0.params=
comment0.target=Board()
comment0.text=\n\ Build\ a\ new\ game\ board\n
comment1.params=
comment1.target=void\ makeStartingBoard()
comment1.text=\n\ The\ regular\ starting\ position\ (15\ blots\ of\ each\ color)\n
comment10.params=startPoint\ steps\ color\ board
comment10.target=int\ endPointMovingFrom(int,\ int,\ int,\ Board)
comment10.text=\n\ For\ black,\ use\ subtraction\!??\ I'll\ throw\ exception\ for\ negative\ steps\!\n\ For\ white,\ simple\ math\ in\ the\ middle\ of\ the\ board\ (endpoint\ \=\ start\ +\ steps)\n\ but\ trickier\ at\ the\ end\ since\ after\ final\ point\ is\ the\ bar.\n\ This\ just\ calculates\ but\ doesn't\ actually\ try\ to\ move\ any\ pieces.\n\ Is\ handy\ for\ creating\ partialMoves\ (which\ have\ start,\ roll,\ end\ )\n
comment11.params=pointNum
comment11.target=boolean\ legitEndPointNum(int)
comment11.text=\ \n\ A\ blot\ might\ end\ its\ move\ by\ bearing\ off,\ going\ to\ place\ that\ we'll\ call\ bearoff\n\ Not\ sure\ whether\ point\ 0\ is\ used\ in\ this\ implementation...\n\ (See\ the\ JBackgammon.java\ file\ for\ rules\ of\ moves...)\n\ Static\ so\ that\ other\ classes\ can\ use\ it\ without\ an\ instance,\ is\ my\ hope.\n
comment12.params=roll
comment12.target=boolean\ legitRoll(int)
comment12.text=\n\ Elsewhere\ I\ allow\ 0\ for\ dice\ not\ in\ use.\ Is\ this\ bad??\n
comment13.params=color
comment13.target=boolean\ legitColor(int)
comment13.text=\n\ Tells\ us\ if\ a\ color\ is\ legal\n
comment14.params=pointNum
comment14.target=int\ getColorOnPoint(int)
comment14.text=\n\ Tells\ us\ which\ color\ is\ on\ the\ specified\ point\ (black,\ white,\ or\ neutral)\n
comment15.params=pointNum
comment15.target=int\ getHowManyBlotsOnPoint(int)
comment16.params=pointNum\ howMany\ color
comment16.target=void\ setPoint(int,\ int,\ int)
comment16.text=\n\ Specified\ point\ gets\ a\ number\ of\ pieces\ of\ specified\ color.\ \n\ Might\ the\ board\ be\ temporarily\ having\ a\ bad\ number\ of\ pieces\ while\ one\ is\ moving??\n
comment17.params=
comment17.target=void\ rollDice()
comment18.params=
comment18.target=int\ getDice1()
comment19.params=
comment19.target=int\ getDice2()
comment2.params=
comment2.target=void\ makeEasyHitStartingBoard()
comment2.text=\n\ Starting\ position\ in\ which\ it\ is\ easy\ for\ players\ to\ hit\ each\ other\n\ (Handy\ for\ testing\!)\n
comment20.params=
comment20.target=void\ resetDice()
comment20.text=\n\ Put\ both\ dice\ back\ to\ 0\n
comment21.params=pointNum
comment21.target=void\ moveToBar(int)
comment21.text=\n\ Moving\ to\ "bar"\ from\ the\ specified\ point.\n\ Why\ is\ the\ point\ then\ getting\ set\ to\ color\ neutral?\n\ Oh\:\ because\ only\ a\ single\ can\ get\ sent\ to\ the\ bar.\n\ What\ if\ more\ pieces\ are\ there\:\ bogus\ setup\n
comment22.params=
comment22.target=int\ getBlackPipCount()
comment22.text=\n\ Says\ how\ how\ many\ moves\ left\ before\ black\ blots\ are\ all\ "beared\ off".\n\ \n\ E.G.\ suppose\ there\ is\ one\ black\ blot\ on\ point\ 1\:\ answer\ is\ 1\n\ (But\ white\ counts\ the\ other\ way\:\ final\ move\ on\ board\ for\ white\ is\ point\ 24.)\n
comment23.params=
comment23.target=int\ getWhitePipCount()
comment23.text=\n\ Says\ how\ how\ many\ moves\ left\ before\ black\ blots\ are\ all\ "beared\ off".\n\ \n\ At\ the\ start\ of\ the\ game\ we\ think\ this\ should\ be\ 162.\n\ \n\ E.G.\ suppose\ there\ is\ one\ white\ blot\ on\ point\ 1\:\ answer\ is\ 24.\n\ (But\ black\ counts\ the\ other\ way\:\ final\ move\ for\ black\ is\ point\ 1.)\n
comment24.params=
comment24.target=double\ getWhiteBeHitProbability()
comment24.text=\n\ Calculate\ white's\ total\ danger\ score,\ by\ figuring\n\ for\ every\ exposed\ white\ pieces\ are\ there\n\ And\ how\ far\ away\ are\ black\ pieces\ that\ could\ hit\ them\n\ AND\ how\ far\ are\ those\ white\ pieces\ from\ the\ end??\ At\ least\ by\ quadrant?\n\ And\ do\ we\ care\ how\ far\ the\ exposed\ white\ pieces\ are\ from\ eventual\ safety?\n\ \n\ Note\:\ white\ starts\ on\ 1\ and\ ends\ on\ 25\ (bear)\n\ \n
comment25.params=pointNum
comment25.target=int\ whatIsTheWhiteQuadrantForPoint(int)
comment25.text=\n\ White\ starts\ on\ 1\ and\ ends\ on\ 25.\n\ What\ are\ its\ 4\ quadrants\ called?\ Perhaps\ 1..6\ is\ q1,\ 7..12\ \=\ q2,\ etc?\n\ What\ about\ bar\ and\ bear?\n\ Bar\ is\ quadrant\ 1??\ Or\ Quadrants\ don't\ matter\ for\ bar\n
comment26.params=point
comment26.target=double\ blackCanHitPointProb(int)
comment26.text=\n\ for\ a\ particular\ point,\ what\ are\ the\ odds\ black\ can\ land\ on\ it\n
comment27.params=pointNum
comment27.target=boolean\ solitaryWhiteBlotOnPoint(int)
comment27.text=\n\ For\ a\ specific\ point,\ is\ there\ a\ solitary\ white\ piece\ on\ it?\ (Unprotected,\ exposed\!)\n
comment28.params=
comment28.target=int\ getBlackOnBoard()
comment28.text=\n\ Says\ how\ many\ black\ pieces\ are\ still\ on\ the\ board.\n\ Doesn't\ seem\ to\ count\ any\ on\ the\ bar??\n
comment29.params=
comment29.target=int\ getWhiteOnBoard()
comment29.text=\n\ Says\ how\ many\ white\ pieces\ are\ still\ on\ the\ board.\n
comment3.params=
comment3.target=void\ makeAlmostDoneGame()
comment3.text=\ \n\ black\ and\ white\ each\ have\ removed\ 5\ pieces\ already...\n
comment30.params=color
comment30.target=boolean\ canBearOff(int)
comment30.text=\n\ apparently\ pieces\ can't\ bear\ off\ until\ all\ 15\ are\ on\ final\ 6\ points?\n
comment31.params=color
comment31.target=boolean\ onBar(int)
comment31.text=\n\ True\ if\ specified\ color\ has\ any\ blots\ on\ the\ bar\n
comment32.params=roll1\ roll2
comment32.target=void\ setDice(int,\ int)
comment4.params=
comment4.target=void\ make2PieceGame()
comment4.text=\ \n\ black\ and\ white\ each\ have\ removed\ 14\ pieces\ already...\n\ note\:\ white\ ends\ past\ 24,\ black\ ends\ below\ 1.\n
comment5.params=theColor
comment5.target=int\ getBar(int)
comment5.text=\n\ how\ many\ pieces\ of\ this\ color\ are\ on\ the\ bar,\ waiting\ to\ come\ back\ into\ the\ game.\n
comment6.params=theColor
comment6.target=int\ howManyBlots(int)
comment6.text=\n\ Tells\ how\ many\ blots\ (pieces)\ of\ a\ particular\ color\ are\ here\ (including\ on\ the\ bar,\ the\ bear,\ or\ the\ board).\n\ There\ are\ supposed\ to\ always\ be\ 15\ blots\ of\ each\ color\ in\ traditional\ backgammon.\ \n\ Used\ by\ "checkForBadNumberOfBlots(\ )\ to\ check\ possible\ corruption\ of\ board.\n
comment7.params=theColor
comment7.target=void\ checkForBadNumberOfBlots(int)
comment7.text=\n\ Checks\ for\ legal\ number\ of\ white\ and\ black\ blots.\n
comment8.params=pointNum
comment8.target=boolean\ legitStartPointNum(int)
comment8.text=\ \n\ A\ blot\ might\ start\ on\ the\ bar\ or\ on\ a\ legit\ point.\n\ Not\ sure\ whether\ point\ 0\ is\ used\ in\ this\ implementation...\n\ (See\ the\ JBackgammon.java\ file\ for\ rules\ of\ moves...)\n\ Static\ so\ that\ other\ classes\ can\ use\ it\ without\ an\ instance,\ is\ my\ hope.\n
comment9.params=steps
comment9.target=boolean\ legitStepsNum(int)
comment9.text=\n\ The\ biggest\ possible\ move\ in\ standard\ backgammon\ is\ 24\:\ doubles\ of\ 6s\n
numComments=33
