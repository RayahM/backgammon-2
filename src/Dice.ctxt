#BlueJ class context
comment0.params=
comment0.target=Dice()
comment0.text=\n\ Default\ constructor,\ leaves\ dice\ unrolled\n
comment1.params=other
comment1.target=Dice(Dice)
comment1.text=\n\ Copy\ Constructor\n
comment10.params=
comment10.target=int\ whichUnusedDieIsLowest()
comment10.text=\n\ unlike\ lowestRoll,\ this\ tells\ us\ WHICH\ Unused\ die\ has\ the\ lowest\ value.\n
comment11.params=
comment11.target=int\ whichUnusedDieIsHighest()
comment11.text=\n\ unlike\ highestRoll,\ this\ tells\ us\ WHICH\ Unused\ die\ has\ the\ highest\ value.\n\ Will\ fail\ on\ doubles.\n
comment12.params=
comment12.target=int\ whichDieIsUnused()
comment12.text=\n\ returns\ the\ first\ unused\ die\ number\ (WHICH\ die,\ not\ its\ roll\ value),\ \n\ range\ 1..maxMovesCount\n\ working\ its\ way\ up\ from\ lowest\ numbered\ dice\n
comment13.params=whichDie\ newRoll
comment13.target=void\ setDie(int,\ int)
comment13.text=\n\ This\ for\ setting\ a\ specified\ individual\ die.\n\ Can't\ use\ this\ to\ set\ first\ two\ dice\ at\ once\!\ Use\ "roll(5,6)"\ to\ do\ that.\n\ This\ expects\ dice\ numbers\ 1\ or\ 2\ (not\ array\ indices\ 0,1\!\!)\n\ A\ changed\ die\ is\ marked\ as\ unused,\ and\ the\ DoubletCountdown\ starts\ over\ from\ the\ top\!\n
comment14.params=
comment14.target=void\ roll()
comment14.text=\n\ I\ don't\ want\ to\ have\ a\ setRolled(\ )\ because\ I\ think\ this\ is\ better\:\ \n\ this\ rolls\ all\ dice\ and\ sets\ rolled\ to\ true.\n\ To\ invalidate\ the\ dice,\ use\ "reset(\ )"\n\ Unfortunately,\ if\ receiving\ a\ networked\ roll,\ we\ need\ to\ set\ rolled\ to\ true,\ I\ guess.\n\ Note\:\ there\ is\ a\ version\ of\ this\ for\ setting\ two\ specific\ dice\ values\ "roll(int,int)"\ \n\ which\ is\ called\ by\ this.\n
comment15.params=newRoll1\ newRoll2
comment15.target=void\ roll(int,\ int)
comment15.text=\n\ changes\ the\ (first\ two)\ dice\ to\ specified\ values\n
comment16.params=newRolled
comment16.target=void\ setRolled(boolean)
comment16.text=\n\ If\ we\ want\ to\ manually\ set\ the\ dice\ values,\ set\ them\ all\ before\ setting\ "rolled"\ to\ true\n\ because\ I\ will\ squawk\ if\ some\ of\ the\ dice\ don't\ have\ values\ (are\ UNROLLED).\n\ It's\ probably\ easiest\ to\ just\ call\ roll(newDie1val,\ newDie2val)\n\ (or\ do\ what\ roll(int,int)\ does\:\ call\ roll(\ )\ and\ then\ change\ some\ of\ their\ values.\n\ \n\ Hmmm,\ if\ the\ dice\ are\ already\ rolled,\ this\ has\ no\ effect,\ \n\ (doesn't\ reset\ the\ used\ and\ numOfPartialMovesAvailcountdown)\n
comment17.params=
comment17.target=boolean\ allDiceHaveValues()
comment17.text=\n\ checks\ for\ no\ dice\ are\ UNROLLED\ value\n
comment18.params=
comment18.target=boolean\ getRolled()
comment18.text=\n\ Supposedly,\ when\ rolled\ is\ true,\ all\ dice\ have\ values\ from\ minDiceVal..maxDiceVal.\n\ Use\ "roll(\ )"\ to\ roll\ again,\ use\ "reset(\ )"\ to\ blank\ them\ all\ out\ and\ set\ rolled\ \n\ to\ false.\n
comment19.params=
comment19.target=java.util.Random\ getRDice()
comment19.text=\n\ gets\ the\ private\ "rdice"\ random\ number\ generator.\n\ Why\ should\ anybody\ need\ it?\ I\ don't\ know,\ but\ I'm\ revealing\ it\n\ for\ unit\ testing.\ Might\ be\ null\!\n
comment2.params=newDie1\ newDie2
comment2.target=Dice(int,\ int)
comment2.text=\n\ Constructor\ for\ objects\ of\ class\ Dice\ with\ only\ 2\ dice.\ \n\ If\ we\ get\ more\ dice,\ this\ has\ to\ die.\n\ Only\ accepts\ rolls\ of\ minDiceVal\ ..\ maxDiceVal\ \ or\ Dice.UNROLLED\n\ Should\ it\ accept\ 0's\ so\ I\ can\ pass\ around\ unrolled\ dice?\ I\ guess\ so.\n\ Figures\ out\ rolled\ status\ based\ on\ the\ values\ it\ gets\ for\ the\ Dice\:\n\ Either\ both\ dice\ have\ values\ in\ the\ "rolled"\ range\ or\ both\ must\ be\ UNROLLED\:\n\ This\ will\ throw\ exception\ if\ one\ diceValue\ is\ UNROLLED\ while\ other\ is\ in\ rolled\ range\!\n
comment20.params=newUsedDie
comment20.target=boolean\ getUsedDie(int)
comment20.text=\n\ Tells\ us\ if\ specified\ die\ has\ been\ used.\n\ note\:\ if\ I\ get\ doubles,\ I'm\ keeping\ track\ of\ 4\ usable\ dice\!\n\ Users\ are\ speaking\ in\ terms\ of\ die\#1\ and\ die\#2\ which\ use\ our\ private\ used[0]\ \n\ and\ used[1]\ respectively.\n\ And\ I'm\ sneaking\ up\ on\ the\ idea\ of\ coding\ doubles\ as\ 4\ (identical)\ dice\ 1..4,\ \n\ so\ allowing\ up\ to\ 4\ here.\n
comment21.params=rollVal
comment21.target=int\ whichDieHasValue(int)
comment21.text=\n\ Special\ for\ doubles\:\ every\ die\ has\ same\ value,\ so\ just\ returning\ "1"\n\ Be\ careful\ about\ using\ this\ with\ doubles\ since\ it\ won't\ correspond\n\ to\ which\ potential\ moves\ are\ which.\n\ Note\:\ in\ the\ outside\ world\ the\ die\ numbers\ are\ 1,2[,3,4\ for\ doubles]\n\ but\ in\ here\ the\ arrays\ are\ numbered\ 0,1[,2,3].\n\ \n\ @return\ \ \ \ \ which\ die\ has\ this\ value.\ NO_SUCH_DIE\ (-9)\ if\ none.\n
comment22.params=whichVal
comment22.target=void\ setUsedValue(int)
comment22.text=\n\ Suppose\ I\ roll\ 5,6\ and\ want\ to\ say\ that\ I've\ used\ the\ \u201C5\u201D\n\ unlike\ \u201CsetUsedDie\u201D,\ this\ works\ from\ roll\ value,\ Not\ which\ die\ you\u2019re\ talking\ about.\n\ If\ we\ have\ doubles\ (e.g.\ 5,5)\ then\ it\ doesn't\ matter\ which\ we\ use,\ so\ we\n\ can\ use\ one\ that\ isn\u2019t\ used\ yet\ OUT\ OF\ FOUR.\n\ \n\ gy\ suggestion\ 2012\ (he\u2019s\ full\ of\ \u2019em\!)\:\ return\ a\ boolean\ indicating\ success.\n\ hmmm,\ if\ Dice\ were\ a\ hashmap\ or\ something\ we\ could\ quick\ search\ for\ whichVal.\n
comment23.params=
comment23.target=boolean\ allDiceAreUsed()
comment23.text=\n\ convenience\ method\n
comment24.params=newUsedDie\ newUsedTF
comment24.target=void\ setUsedDie(int,\ boolean)
comment24.text=\n\ Tell\ a\ specific\ die\ (by\ die\#,\ not\ by\ value)\ that\ it\ has\ been\ used.\n\ If\ this\ is\ news\ (if\ the\ die\ is\ not\ already\ marked\ used)\ then\ this\ decreases\n\ numOfPartialMovesAvail\ (and\ formerly\ increased\ usedDiceHowMany).\n\ \n\ doMove\ and\ doPartialMove\ might\ be\ calling\ this\ when\ they\ know\ which\ die\ they're\ using,\n\ but\ now\ that\ there\ is\ a\ setUsedValue(\ )\ method,\ they\ could\ call\ setUsedValue(\ )\ instead\n\ of\ this\ setUsedDie(\ ),\ without\ caring\ which\ die\ holds\ the\ used\ value.\ Handy\!\n
comment25.params=
comment25.target=void\ reset()
comment25.text=\n\ Puts\ the\ dice\ into\ unrolled\ state\ without\ dice\ values,\ ready\ for\ new\ roll.\n
comment26.params=
comment26.target=void\ resetUsedDice()
comment26.text=\n\ Tells\ all\ the\ dice\ that\ they\ are\ unused.\n\ (For\ doubles,\ tells\ four\ of\ them,\ otherwise\ just\ 2)\n\ This\ also\ resetNumOfPartialMovesAvail(\ )\ so\ don't\ make\ it\ in\ turn\ call\ us\!\n
comment27.params=
comment27.target=boolean\ isDoubles()
comment28.params=
comment28.target=int\ getNumOfPartialMovesAvail()
comment28.text=\n\ Tells\ the\ dice\ that\ one\ of\ the\ doublet\ rolls\ has\ been\ used.\n\ Can\ only\ be\ used\ when\ dice\ are\ doubles,\ \n\ Otherwise\ use\ "setUsedDie(int\ whichDie,\ true);"\ to\ mark\ a\ move\ as\ used\!\n\ \n\ New\ approach,\ 2012apr25\:\ whether\ you\ have\ doubles\ or\ not,\ just\ tell\n\ dice\ that\ they're\ used,\ which\ will\ cause\ numOfPartialMovesAvail\ to\ decrease\n\ and\ DON'T\ let\ anybody\ else\ decrease\ it.\ Making\ this\ uncallable\ to\ force\n\ all\ calls\ to\ become\ syntax\ error\ so\ I\ can\ find\ and\ replace\ them.\n
comment29.params=newNumOfPartialMovesAvail
comment29.target=void\ setNumOfPartialMovesAvail(int)
comment29.text=\n\ Sets\ the\ numOfPartialMovesAvail\ to\ a\ specified\ value,\ unlike\n\ resetNumOfPartialMovesAvail(\ )\ which\ sets\ it\ to\ 2\ or\ 4\ as\ appropriate\n\ (and\ 0\ if\ the\ dice\ aren't\ rolled).\n
comment3.params=dieVal
comment3.target=boolean\ legitDiceValue(int)
comment3.text=\n\ allows\ UNROLLED\ or\ [minDiceVal\ to\ maxDiceVal]\n
comment30.params=
comment30.target=void\ resetNumOfPartialMovesAvail()
comment30.text=\n\ restarts\ the\ countdown,\ so\ don't\ use\ this\ willy\ nilly\!\n\ Is\ called\ by\ resetUsedDice,\ so\ don't\ call\ it\!\n
comment31.params=
comment31.target=java.lang.String\ diceRollValuesAvailable()
comment31.text=\n\ for\ printing\ out\ info\ about\ current\ board,\n\ will\ be\ list\ of\ unused\ rollValues\ (not\ dice\ nums\:\n\ e.g.\ if\ die1\=\=5\ and\ die2\=\=6,\ this\ returns\ 5,6\ if\ none\ are\ used).\n
comment32.params=
comment32.target=java.lang.String\ toString()
comment32.text=\n\ returns\ the\ dice\ roll\ values\ (only\ 2)\n\ and\ tells\ which\ dice\ have\ been\ used,\ numbered\ 1,2,3,4\ not\ 0,1,2,3\n\ ??\ Will\ this\ malfunction\ on\ doubles?\n
comment33.params=
comment33.target=java.lang.String\ shortString()
comment33.text=\n\ merely\ returns\ 3,1\ \ or\ 2,2\ unlike\ toString\ which\ returns\ all\ kinds\ of\ info\n\ including\ how\ many\ partialMoves\ remaining\ and\ which\ dice\ are\ used\n
comment4.params=dieNum
comment4.target=boolean\ legitDieNum(int)
comment4.text=\n\ for\ specifying\ which\ DIE\ we're\ talking\ about,\ not\ the\ value\ on\ a\ face\ of\ a\ die\!\n
comment5.params=
comment5.target=int\ getDie1()
comment5.text=\n\ convenience\ method.\n\ Note\:\ there\ is\ no\ dice0\n
comment6.params=
comment6.target=int\ getDie2()
comment6.text=\n\ convenience\ method\n\ Note\:\ there\ is\ a\ dice2,\ and\ there\ is\ no\ dice0\n
comment7.params=whichDie
comment7.target=int\ getDie(int)
comment7.text=\n\ Dice\ are\ named\ "1",\ "2"\ ...\ up\ to\ howManyDice\ (there\ is\ no\ dice\ 0\!)\n\ corresponding\ to\ hidden\ array\ dice[0],\ dice[1],\ respectively\n
comment8.params=
comment8.target=int\ lowestUnusedRoll()
comment8.text=\n\ returns\ the\ value\ of\ the\ lowest\ die.\n\ will\ be\ 0\ (??)\ if\ dice\ unrolled?\n\ See\ whichUnusedDieIsHighest(\ )\ to\ find\ out\ which\ Die\ holds\ this\ value.\n\ [\ ]This\ ought\ to\ be\ reconciled\ with\ whichUnusedDieIsLowest(\ )\ which\ says\n\ WHICH\ die\ is\ lowest\ instead\ of\ giving\ its\ value.\ They\ could\ use\ the\ same\ code\n\ and\ then\ one\ returns\ value\ instead\ of\ position.\ Ditto\ for\ highest.\n
comment9.params=
comment9.target=int\ highestUnusedRoll()
comment9.text=\n\ returns\ the\ value\ of\ the\ highest\ (roll\ value)\ die.\n\ will\ be\ 0\ (??)\ if\ dice\ unrolled?\n\ See\ whichUnusedDieIsHighest(\ )\ to\ find\ out\ which\ Die\ holds\ this\ value.\n
numComments=34
