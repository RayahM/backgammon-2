#BlueJ class context
comment0.params=theNewPartials\ myNewColor
comment0.target=Move(java.util.ArrayList,\ Player)
comment0.text=\n\ Constructor\ for\ objects\ of\ class\ Move,\ receiving\ 2??\ moves.\n\ 0,1,2,3,4\ are\ all\ possible\ since\ we\ might\ have\ rolled\ doubles\ and\ might\ be\ blocked.\n\ \n\ partialMoves\ hold\ playerColor\ info,\ but\ we\ need\ the\ playerColor\ info\ anyway\n\ if\ there\ are\ no\ partial\ moves\ (if\ this\ is\ a\ short\ move\ and/or\ forfeitTurn).\n
comment1.params=start1\ end1\ rollVal1\ start2\ end2\ rollVal2\ aBoard\ playerColor
comment1.target=Move(int,\ int,\ int,\ int,\ int,\ int,\ Board,\ Player)
comment1.text=\n\ Constructor,\ receiving\ int\ value\ specification\ of\ 2-partials\n\ Need\ a\ version\ of\ this\ for\ 4\ partials\ (doubles\ were\ rolled)?\n\ @param\ aBoard\ need\ this\ for\ checking\ legality\ of\ the\ moves\n
comment10.params=otherMove
comment10.target=boolean\ resultsSame(Move)
comment10.text=\n\ This\ is\ called\ by\ equals(\ )\ to\ compare\ to\ another\ move.\n\ \n\ Order\ of\ moves\ might\ matter\n\ --when\ only\ some\ of\ the\ blots\ are\ coming\ in\ from\ the\ bar...\n\ --?when\ one\ or\ more\ blots\ are\ bearing\ off,\ \n--\ when\ there\ are\ protected\ enemy\ points\ in\ between,\n\ --when\ one\ piece\ is\ making\ multiple\ moves.\n\ \n\ The\ creator\ can't\ know\ whether\ order\ matters\ unless\ they're\ sure\ what\ board\n\ is\ the\ context??\ And\ could\ just\ tell\ us?\n\ \n\ Or\ maybe\ order\ should\ always\ matter?\ Nah,\ but\ we\ might\ have\ to\ test\ on\ (copies\ of)\n\ our\ board\ to\ see\ if\ the\ results\ are\ the\ same...\ meaning\ boards\ would\ need\ an\ equality\n\ test.\n
comment11.params=
comment11.target=boolean\ thisPathOnlyWorksInOneOrder()
comment11.text=\n\ Tricky\:\ called\ when\ we\ see\ that\ a\ blot\ is\ moving\ twice\:\ detected\ by\ \n\ "checkWhetherOrderMatters"\ which\ sees\ somebody\ moving\ from\ a\ place\ they\ haven't\ \n\ reached\ yet.\ Maybe\ the\ blot\ is\ moving\ 2\ and\ then\ 4,\ and\ maybe\ it\ couldn't\ get\ \n\ there\ if\ it\ instead\ moved\ 4\ and\ then\ 2.\ Check\ it\ out\ by\ finding\ the\ double\ moving\ \n\ blot\ in\ the\ PartialMove\ and\ ask\ the\ board\ if\ the\ other\ path\ hits\n\ Board.protectedPoint(\ \ other\ color\ )\ ...\ if\ so,\ this\ method\ returns\ TRUE;\n
comment12.params=
comment12.target=java.lang.String\ toString()
comment12.text=thisPathOnlyWorksInOneOrder(\ )
comment13.params=
comment13.target=int\ hashCode()
comment2.params=other
comment2.target=Move(Move)
comment2.text=\n\ copy\ constructor\n\ does\ deep\ copy\ of\ partialMoves\ since\ other\ classes\ might\ adjust\ the\ original\ partials\n
comment3.params=
comment3.target=Board\ getMyBoard()
comment3.text=\n\ boards\ are\ usually\ null,\ but\ should\ get\ set\ if\ we're\ going\ to\ compare\ equality\ of\ moves\n\ and\ are\ considering\ equality\ in\ which\ order\ of\ partials\ doesn't\ matter.\n
comment4.params=newMyBoard
comment4.target=void\ setMyBoard(Board)
comment4.text=\n\ boards\ are\ usually\ null,\ but\ should\ get\ set\ if\ we're\ going\ to\ compare\ equality\ of\ moves\n\ and\ are\ considering\ equality\ in\ which\ order\ of\ partials\ doesn't\ matter.\n
comment5.params=
comment5.target=java.util.ArrayList\ getMyPartials()
comment5.text=\n\ not\ a\ clone\ but\ a\ pointer.\ Beware\!\!??\ \n
comment6.params=theBoard
comment6.target=boolean\ isPossible(Board)
comment6.text=\n\ See\ if\ ANY\ of\ the\ partialMoves\ are\ blocked\ or\ illegal.\n\ Since\ each\ move\ changes\ the\ board,\ we'll\ use\ a\ temporary\n\ board\ and\ play\ out\ the\ moves\ (In\ Order\!)\ upon\ it.\n\ NOT\ playing\ the\ last\ move\!\n\ Checks\ if\ the\ dice\ are\ rolled\ to\ values\ used\ by\ this\ move.\n
comment7.params=other
comment7.target=boolean\ equals(java.lang.Object)
comment7.text=\n\ has\ to\ check\ values\ inside\ PartialMoves.\n\ Uh-oh\:\ context\ matters.\ On\ some\ boards,\ the\ PartialMoves\ will\ work\ in\ any\n\ order\ so\ order\ doesn't\ matter\ _on_that_board_\ but\ on\ other\ boards\ the\n\ partials\ can\ only\ happen\ in\ a\ certain\ order\ since\ blocked\ in\ other\ order,\n\ and\ then\ the\ order\ of\ partials\ matters\ when\ deciding\ equality\ of\ Moves.\n\ So\ "equals(\ )"\ needs\ context\ (Moves\ must\ own\ non-null\ board?)\ or\ else\n\ order\ matters\ by\ default??\n\ perhaps\ moves\ have\ a\ (usually\ null)\ board,\ and\ AI\ could\ say\ to\ itself\n\ \ \ \ move1.setBoard(tempBoard);\ move2.setBoard(tempBoard);\ if\ (move1.equals(move2))\n\ and\ orderMatters(\ )\ checks\ whether\ boards\ are\ null...\n\ \n\ Note\:\ occasions\ in\ which\ order\ matters\ are\n\ (1)\ Bar\ entry\ and\ then\ a\ move\ upon\ board\n\ (2)\ Moving\ to\ an\ unoccupied\ (or\ enemy\ occupied)\ blot\ and\ then\ moving\ on\ from\ there\n\ (3)\ Bringing\ last\ piece\ into\ final\ quadrant\ which\ then\ allows\ next\ move\ to\ bear\ off\n
comment8.params=other
comment8.target=boolean\ hasSameValuesAs(Move)
comment8.text=\n\ called\ by\ equals(\ )\n
comment9.params=other
comment9.target=boolean\ hasSameValuesInDifferentOrderFrom(Move)
comment9.text=\n\ Called\ by\ equal(\ ),\ which\ has\ already\ checked\ for\ null\ and\ size\ mismatch,\ but\ I'll\ \n\ check\ them\ again\ in\ case\ I\ ever\ want\ to\ re-use\ this\ function.\n\ \n\ Since\ collections\ can\ be\ sorted,\ I\ sort\ both\ lists\ of\ moves\ and\ then\ compare\ them\ in\ \n\ parallel.\ (Early\ idea\ was\ just\ check\ containsAll\ in\ both\ directions,\ but\ that\ could\ \n\ give\ false\ positive\ if\ they\ have\ the\ same\ partialMoves\ but\ in\ different\ proportions\!\ \n\ eg\ [2,2,3]\ \=?\ [2,3,3])\n
numComments=14
