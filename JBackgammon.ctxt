#BlueJ class context
comment0.params=dmsg
comment0.target=void\ debug_msg(java.lang.String)
comment0.text=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\ Game-related\ Methods\ \n\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=
comment1.params=point
comment1.target=void\ handlePoint(int)
comment1.text=\n\ Selects\ a\ point\ and\ shows\ the\ possible\ moves\n
comment10.params=
comment10.target=void\ endMove()
comment11.params=
comment11.target=Board\ getMyBoard()
comment12.params=
comment12.target=int\ getCurrent_player()
comment13.params=theColor\ myGame
comment13.target=java.util.ArrayList\ allLegalMoves(int,\ JBackgammon)
comment13.text=\n\ Will\ use\ methods\ (below)\n\ private\ boolean\ checkFair(int\ new_pos)\n\ private\ boolean\ canMove()\n\ \n
comment14.params=new_pos
comment14.target=boolean\ checkFair(int)
comment14.text=allLegalMoves(\ )
comment15.params=
comment15.target=boolean\ canMove()
comment16.params=
comment16.target=boolean\ needsInexactRolls()
comment17.params=color\ old_pos\ new_pos
comment17.target=void\ move(int,\ int,\ int)
comment18.params=
comment18.target=void\ setupGUI()
comment19.params=
comment19.target=void\ connect()
comment2.params=new_move\ move
comment2.target=void\ superMove(int,\ int)
comment2.text=\ \n\ Handle\ moving\ from\ one\ point\ to\ another\n\ new_move\ -\ the\ new\ position\ to\ move\ to\n\ move\ -\ which\ dice\ is\ being\ used,\ the\ first\ one\ or\ the\ second\ one\n
comment20.params=
comment20.target=void\ sendMessage()
comment21.params=
comment21.target=void\ receiveLose()
comment21.text=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\ Network\ Methods\ \n\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=
comment22.params=
comment22.target=void\ disconnected()
comment23.params=
comment23.target=void\ connectionRefused()
comment23.text=\n\ Implementing\ the\ "connectionRefused(\ )"\ method\ of\ interface\ CommunicationAdapter\n\ Which\ says\ what\ to\ do\ if\ we\ could\ not\ connect\ to\ an\ ip\n
comment24.params=i\ j
comment24.target=void\ receiveRolls(int,\ int)
comment25.params=point
comment25.target=void\ receiveBar(int)
comment26.params=
comment26.target=void\ receiveResetReq()
comment27.params=resp
comment27.target=void\ receiveResetResp(int)
comment28.params=oldpos\ newpos
comment28.target=void\ receiveMove(int,\ int)
comment28.text=\n\ The\ network\ player\ has\ moved,\ update\ the\ board.\n\ ??\ Is\ network\ player\ always\ black??\n
comment29.params=message
comment29.target=void\ receiveMessage(java.lang.String)
comment3.params=
comment3.target=void\ bearOff()
comment3.text=\n\ Bear\ off\ a\ checker\ from\ the\ current\ point\n
comment30.params=
comment30.target=void\ connected()
comment31.params=
comment31.target=void\ turnFinished()
comment32.params=n
comment32.target=JBackgammon(boolean)
comment32.text=\n\ JBackgammon\ class\ constructor\n\ Sets\ title\ bar,\ size,\ shows\ the\ window,\ and\ does\ the\ GUI\n
comment33.params=e
comment33.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment34.params=g
comment34.target=void\ paint(java.awt.Graphics)
comment35.params=args
comment35.target=void\ main(java.lang.String[])
comment36.params=e
comment36.target=void\ windowClosing(java.awt.event.WindowEvent)
comment37.params=point
comment37.target=int\ findX(int)
comment37.text=\ \n\ Gets\ the\ X\ coordinate\ of\ the\ specified\ point\ (aka\ "column"\ or\ "spike")\n
comment38.params=point
comment38.target=int\ findY(int)
comment39.params=
comment39.target=void\ drawPipStats()
comment4.params=
comment4.target=void\ handleBar()
comment4.text=\n\ Handle\ someone\ being\ on\ the\ bar\n\ Mark\ possible\ escapes\ and\ forfeit\ if\ there\ are\ none\n
comment40.params=
comment40.target=void\ drawBearStats()
comment41.params=message\ x\ y\ c\ size
comment41.target=void\ putString(java.lang.String,\ int,\ int,\ java.awt.Color,\ int)
comment42.params=roll\ x\ y\ dicecolor\ dotcolor
comment42.target=void\ drawDice(int,\ int,\ int,\ java.awt.Color,\ java.awt.Color)
comment43.params=x\ y\ point_color
comment43.target=void\ drawTriangle(int,\ int,\ int)
comment43.text=\n\ drawTriangle\:\ Draws\ a\ triangle\ with\ the\ point\ facing\ downward,\ \n\ takes\ in\ left\ corner\ coordinates\ and\ a\ number\ for\ color\ \n\ hooks\:\ status,\ g_buffer,\ old_point\ \n
comment44.params=x\ y\ point_color
comment44.target=void\ drawTriangleRev(int,\ int,\ int)
comment44.text=\n\ drawTriangleRev\:\ Draws\ a\ triangle\ with\ the\ point\ facing\ downward,\n\ takes\ in\ left\ corner\ coordinates\ and\ a\ number\ for\ color\n\ hooks\:\ status,\ g_buffer,\ old_point\ \n
comment45.params=
comment45.target=void\ drawBoard()
comment46.params=
comment46.target=void\ drawBar()
comment47.params=
comment47.target=void\ drawMen()
comment48.params=point_x\ point_y
comment48.target=int\ getPointNum(int,\ int)
comment49.params=msg\ data
comment49.target=void\ debug_data(java.lang.String,\ int)
comment5.params=
comment5.target=void\ forfeit()
comment5.text=\n\ Forfeit\ the\ current\ player's\ turn\n
comment50.params=
comment50.target=void\ resetGame()
comment6.params=color
comment6.target=boolean\ checkWin(int)
comment6.text=\n\ Checks\ if\ there\ is\ a\ winner\n\ If\ there\ is\ one,\ displays\ appropriate\ message\n\ Return\ true\ if\ there\ was\ a\ winner,\ false\ otherwise\n
comment7.params=
comment7.target=void\ doRoll()
comment8.params=
comment8.target=void\ endTurn()
comment9.params=
comment9.target=void\ startTurn()
numComments=51
