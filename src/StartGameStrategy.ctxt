#BlueJ class context
comment0.params=
comment0.target=StartGameStrategy()
comment0.text=\n\ Constructor\ for\ objects\ of\ class\ StartGame\n
comment1.params=aBoard\ playerColor
comment1.target=Move\ pickBestMove(Board,\ Player)
comment1.text=\n\ @param\ \ currentBoard\ is\ ideally\ ready\ for\ start\ of\ move,\ isn't\ partially\ moved\ already\n\ @return\ \ \ \ \ Move\ is\ a\ collection\ of\ partial\ moves\n
comment10.params=theRoll
comment10.target=Move\ dealWithDoubles(int)
comment10.text=\n\ Only\ six\ possible\ doubles\ to\ deal\ with.\n\ Note\:\ starting\ board\ has\ whites\ on\ point\ 1\ (2\ of\ 'em),\ 12\ (5),\ 17\ (3),\ 19\ (5)\n\ blacks\ on\ points\ 6\ (5),\ 8\ (3),\ 13\ (5),\ 24\ (2)\n\ \n\ This\ is\ rigged\ to\ only\ deal\ with\ black.\n
comment11.params=start1\ end1\ rollVal1\ start2\ end2\ rollVal2
comment11.target=Move\ move2And2(int,\ int,\ int,\ int,\ int,\ int)
comment11.text=\n\ This\ was\ briefly\ called\ "dealWithDoublesOf1"\ but\ now\ is\n\ more\ general\ purpose\ for\ dealing\ with\ all\ doubles.\ Assumes\n\ you're\ moving\ two\ blots\ from\ (point)\ start1\ to\ end1,\ and\ moving\ \n\ another\ 2\ blots\ from\ start2\ to\ end2.\n\ \n\ This\ could\ probably\ be\ put\ into\ Move\ class\ as\ a\ convenience\ method.\n
comment12.params=
comment12.target=java.lang.String\ toString()
comment12.text=move2And2(\ )
comment2.params=
comment2.target=Move\ lowDice6()
comment2.text=\n\ This\ will\ calculate\ the\ starting\ moves\ for\ dice\ 6\ &\ anything.\n
comment3.params=
comment3.target=Move\ lowDice5()
comment3.text=\n\ This\ will\ calculate\ the\ starting\ moves\ for\ dice\ 5\ &\ anything.\n
comment4.params=
comment4.target=Move\ lowDice4()
comment4.text=\n\ This\ will\ calculate\ the\ starting\ moves\ for\ dice\ 4\ &\ anything.\n
comment5.params=
comment5.target=Move\ lowDice3()
comment5.text=\n\ This\ will\ calculate\ the\ starting\ moves\ for\ dice\ 3\ &\ anything.\n
comment6.params=
comment6.target=Move\ lowDice2()
comment6.text=\n\ This\ will\ calculate\ the\ starting\ moves\ for\ dice\ 2\ &\ anything.\n
comment7.params=
comment7.target=Move\ lowDice1()
comment7.text=\n\ This\ will\ calculate\ the\ starting\ moves\ for\ dice\ 1\ &\ anything.\n
comment8.params=startLow\ endLow\ startHigh\ endHigh
comment8.target=Move\ oldBuildMove(int,\ int,\ int,\ int)
comment8.text=\n\ This\ will\ happen\ if\ order\ of\ small\ die\ move\ and\ then\ large\ die\ move.\n\ It\ it\ HAS\ to\ move\ in\ the\ reverse\ order,\ call\ this\ with\ boolean\ makeTheHighMoveFirst\ \=\ true.\n
comment9.params=startLow\ endLow\ startHigh\ endHigh\ makeTheHighMoveFirst
comment9.target=Move\ oldBuildMove(int,\ int,\ int,\ int,\ boolean)
comment9.text=\n\ The\ order\ of\ these\ moves\ might\ matter\!\n\ This\ could\ move\ into\ Class\ Move\ as\ a\ convenience\ class\ if\ dice1isLow\ were\ a\ param\ OR\n\ if\ this\ received\ rollVals\ instead\ of\ hardwiring\ die\ numbers\ 1\ &\ 2\ in\ the\ first\ 8\ lines.\n\ \n\ This\ is\ relatively\ clunky\ and\ unnecessary\ now\ that\ I\ have\ a\ new\ Move\ Constructor\n\ which\ receives\ (start1,end1,rollVal1,\ \ start2,end2,rollVal2,\ aBoard,\ playerColor);\n
numComments=13
