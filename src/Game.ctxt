#BlueJ class context
comment0.params=
comment0.target=Game()
comment0.text=\n\ Game\ class\ constructor\n\ assumes\ you're\ playing\ against\ AI.\n\ (Use\ the\ Game(boolean)\ constructor\ if\ you\ want\ to\ set\ up\ network\ game)\n
comment1.params=networkTF
comment1.target=Game(boolean)
comment1.text=\n\ Game\ class\ constructor\n\ When\ running\ tests,\ I\ don't\ want\ the\ JOptionPane\ to\ put\ up\ dialog\n\ boxes\ that\ require\ mouse\ click\ to\ dismiss.\n\ The\ testing\ boolean\ is\ final,\ so\ can\ only\ be\ set\ at\ startup\!\n
comment10.params=playerColor
comment10.target=void\ startTurn(Player)
comment10.text=\n\ Begins\ a\ player's\ turn\n
comment11.params=playerColor
comment11.target=void\ endPartialMove(Player)
comment11.text=\ \n\ This\ is\ for\ Partial\ Move\n\ Remove\ focus\ from\ a\ certain\ point\ which\ has\ been\ selected\n\ This\ allows\ the\ player\ to\ select\ a\ new\ point.\n\ called\ by\ Board,\ so\ can't\ be\ private.\n\ Disables\ the\ CancelChoice\ button\ because\ there's\ not\n\ a\ tentative\ partial\ move\ to\ cancel\ anymore\!\n
comment12.params=
comment12.target=Board\ getMyBoard()
comment12.text=\n\ Returns\ the\ game's\ mainboard,\ which\ (currently)\ is\ the\ only\ board\n\ with\ gui\ display\ (View)\ and\ gui\ buttons\ (Controller).\ Other\ boards\n\ are\ created\ to\ test\ hypothetical\ moves\ but\ don't\ have\ V\ &\ C\ and\n\ any\ moves\ upon\ those\ hypothetical\ boards\ are\ not\ official\ moves\n\ of\ the\ game.\n\ [\ ]Games\ ought\ to\ keep\ a\ history\ of\ official\ moves\!\n
comment13.params=
comment13.target=Player\ getCurrentPlayer()
comment13.text=\ \n\ returns\ (point\ to)\ currentPlayer\ or\ null\ means\ game\ unstarted\n\ formerly\ returned\ int\ white\ \=\ 1;\ black\ \=\ 2;\ (shouldn't\ ever\ have\ neutral\ \=\ 0;)\n
comment14.params=newPlayerColor
comment14.target=void\ setCurrentPlayer(Player)
comment14.text=\n\ note\:\ beware\ overlapping\ duties\ hardcoded\ into\ startTurn(\ ),\ endTurn(\ ),\ ??\n\ Should\ this\ acknowledge\ a\ change\ somehow?\ Shouldn't\ roll\ dice,\ I\ guess.\n
comment15.params=
comment15.target=void\ setupGUI()
comment15.text=\n\ \ Initialize\ the\ GUI\n\ \ \ Sets\ up\ all\ the\ buttons\n
comment16.params=
comment16.target=void\ connect()
comment16.text=\n\ \ Connect\ to\ another\ Game\ for\ network\ play\n
comment17.params=
comment17.target=void\ sendMessage()
comment17.text=\n\ \ Method\ to\ send\ a\ message\ through\ a\ JOptionPane\ to\ the\ other\ user\n
comment18.params=
comment18.target=void\ receiveLose()
comment18.text=\n\ The\ remote\ network\ player\ has\ won\n
comment19.params=
comment19.target=void\ receiveForfeitTurn()
comment19.text=\n\ The\ remote\ player\ is\ forfeiting\ a\ turn\n
comment2.params=networkTF\ newTesting
comment2.target=Game(boolean,\ boolean)
comment2.text=\n\ Game\ class\ constructor\n\ Sets\ title\ bar,\ size,\ shows\ the\ window,\ and\ does\ the\ GUI\n
comment20.params=
comment20.target=void\ disconnected()
comment20.text=\n\ \ Connection\ lost,\ reset\ the\ board\ for\ a\ new\ game\n
comment21.params=
comment21.target=void\ connectionRefused()
comment21.text=\n\ Implementing\ the\ "connectionRefused(\ )"\ method\ of\ interface\ CommunicationAdapter\n\ Which\ says\ what\ to\ do\ if\ we\ could\ not\ connect\ to\ an\ ip\n
comment22.params=aBoard\ i\ j
comment22.target=void\ receiveRolls(Board,\ int,\ int)
comment22.text=\n\ \ The\ network\ player\ has\ rolled\ the\ dice,\ display\ them\n
comment23.params=aBoard\ point
comment23.target=void\ receiveBar(Board,\ int)
comment23.text=\n\ The\ local\ (non-network)\ player\ got\ sent\ to\ the\ bar,\ so\ update\ the\ board.\n\ Apparently\ point\ is\ a\ number\ from\ the\ point\ of\ view\ of\ the\ opponent?\n\ Apparently\ remote\ network\ player\ is\ always\ black\ on\ our\ screen,\ while\n\ perhaps\ white\ on\ her\ screen??\n\ So\ that's\ why\ we're\ doing\ the\ 25\ -\ point\ thing??\n
comment24.params=
comment24.target=void\ receiveResetReq()
comment24.text=\n\ The\ network\ player\ requested\ a\ new\ game,\ and\ wants\ a\ response\n
comment25.params=resp
comment25.target=void\ receiveResetResp(int)
comment25.text=\n\ The\ network\ player\ responded\ to\ a\ new\ game\ request,\ process\ the\ results\n
comment26.params=aBoard\ playerColor\ oldpos\ newpos\ rollValue
comment26.target=void\ receiveMove(Board,\ Player,\ int,\ int,\ int)
comment26.text=\n\ The\ network\ player\ has\ moved,\ update\ the\ board.\n\ Apparently\ remote\ network\ player\ is\ always\ black\ on\ our\ screen,\ while\n\ perhaps\ white\ on\ her\ screen??\ (which\ explains\ why\ her\ moves\ are\ getting\ (25\ -\ X)).\n\ Apparently\ oldpos\ value\ -1\ used\ to\ mean\ coming\ in\ from\ bar,\ and\ 26\ meant\ bearing\ off?\n\ Are\ the\ constants\ being\ handed\ in\ properly\ for\ BAR_\ and\ BEAR?\ \ Probably\ not.\n\ This\ isn't\ using\ any\ of\ the\ improved\ selectAPoint\ and\ moveBlot\ code\ yet.\n
comment27.params=message
comment27.target=void\ receiveMessage(java.lang.String)
comment27.text=\n\ The\ network\ player\ has\ sent\ an\ instant\ message.\ Display\ it\n
comment28.params=
comment28.target=void\ connected()
comment28.text=\ \n\ Connection\ with\ an\ instance\ of\ Game\ successfully\ established.\n\ Start\ the\ game.\ "The\ client\ initiating\ the\ connection\ decides\ \n\ who\ goes\ first."\ \n
comment29.params=aBoard
comment29.target=void\ turnFinished(Board)
comment29.text=\ The\ network\ player\ has\ finished\ his\ turn.\n\ Start\ the\ local\ player's\ turn\n\ Is\ "local"\ always\ white,\ or\ randomly\ decided\ in\ connected(\ )??\n
comment3.params=
comment3.target=void\ setupNetworking()
comment3.text=\n\ Called\ by\ Game(boolean)\ constructor\ if\ we're\ networking\n
comment30.params=move1or2
comment30.target=void\ buttonCausesPartialMove(int)
comment30.text=\n\ called\ from\ actionPerformed\ by\ gui\ when\ user\ presses\n\ one\ of\ the\ potentialmove\ buttons\n
comment31.params=p\ playerColor\ moveNum
comment31.target=void\ showPartialMove(PartialMove,\ Player,\ int)
comment31.text=\n\ Puts\ visible\ buttons\ on\ start\ and\ end\ of\ the\ move.\n\ Should\ it\ do\ them\ in\ the\ order\ of\ dice\ and\ potMove,\n\ or\ in\ the\ order\ of\ actually\ being\ done\ <--probably\ better.\n\ (Counting\ 0,1,2\ but\ named\ 1,2,3...).\n\ @param\ moveNum\ either\ explicit\ 1,2,3,4\ OR\ 0\ means\ use\ lowest\ invisible\ buttons.\n\ I.E.\ caller\ doesn't\ know\ which\ move\ this\ is\ and\ wants\ us\ to\ figure\ it\ out.\n
comment32.params=
comment32.target=void\ hidePartialMoves()
comment32.text=\n\ would\ be\ nice\ to\ have\ a\ specific\ hidePartialMove(x)\ method,\n\ especially\ for\ doing\ undo...\n
comment33.params=aBoard\ playerColor
comment33.target=void\ doCancel(Board,\ Player)
comment33.text=\n\ Cancelling\ a\ choice\ of\ point,\ saying\ "I\ don't\ really\ want\ to\ move\ from\ here\ after\ all"\n
comment34.params=e
comment34.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment34.text=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\ Overridden\ Methods\ \n\ (constructor\ wants\ boolean\ re\ networked?\ true/false)\n\ \n\ all\ of\ this\ big\ "if"\ should\ be\ separate\ listeners,\n\ perhaps\ anonymous,\ attached\ to\ appropriate\ buttons.\n\ \n\ Note\:\ many\ of\ these\ are\ talking\ to\ "mainBoard"\ which\n\ is\ the\ public\ display\ (MVC)\ of\ the\ most\ visible\ board,\n\ but\ isn't\ necessarily\ the\ temp\ board\ that\ is\ trying\n\ out\ temporary\ moves\ when\ the\ AI\ is\ playing\ with\ itself.\n\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=
comment35.params=g
comment35.target=void\ paint(java.awt.Graphics)
comment35.text=\n\ Talking\ to\ "mainBoard"\ which\n\ is\ the\ public\ display\ (MVC)\ of\ the\ most\ visible\ board,\n\ but\ isn't\ necessarily\ the\ temp\ board\ that\ is\ trying\n\ out\ temporary\ moves\ when\ the\ AI\ is\ playing\ with\ itself.\n
comment36.params=
comment36.target=void\ paintPartialMoveButtons()
comment37.params=args
comment37.target=void\ main(java.lang.String[])
comment38.params=e
comment38.target=void\ windowClosing(java.awt.event.WindowEvent)
comment39.params=point
comment39.target=int\ findX(int)
comment39.text=\ \n\ Gets\ the\ X\ coordinate\ of\ the\ (center\ of?)\ the\ specified\ point\ \n\ (aka\ "column"\ or\ "spike"),\ for\ displaying\ blots\ and\ the\ "move\ here"\n\ buttons\ which\ will\ be\ shown\ just\ below\ the\ point\ of\ possible\ destinations.\n
comment4.params=dmsg
comment4.target=void\ debug_msg(java.lang.String)
comment4.text=\n\ Is\ called\ by\ Board,\ so\ can't\ be\ private.\n
comment40.params=point
comment40.target=int\ findY(int)
comment40.text=\ \n\ Gets\ the\ Y\ coordinate\ (??)\ of\ the\ bottom\ of\ the\ triangle\ of\ the\ specified\ point\ \n\ (aka\ "column"\ or\ "spike"),\ for\ displaying\ blots\ and\ "move\ here"\ buttons\ which\n\ will\ be\ just\ below\ the\ point\ of\ possible\ destinations.\n
comment41.params=aBoard
comment41.target=void\ drawBearStats(Board)
comment41.text=\n\ Announce\ how\ many\ pieces\ each\ player\ beared\ off\ so\ far\n
comment42.params=aBoard
comment42.target=void\ drawPipStats(Board)
comment43.params=aBoard
comment43.target=void\ drawBoardScore(Board)
comment43.text=\n\ Currently\ turned\ off\ since\ score\ comes\ from\ one\ of\ the\ strategies\ now\ \n\ rather\ than\ directly\ from\ the\ board\n
comment44.params=aBoard
comment44.target=void\ drawCurrentPlayer(Board)
comment44.text=\n\ Puts\ their\ name\ on\ board\ ("white"\ "black"\ "game_unstarted")\n
comment45.params=playerColor
comment45.target=java.lang.String\ nameOf(Player)
comment46.params=message\ x\ y\ c\ fontsize
comment46.target=void\ putString(java.lang.String,\ int,\ int,\ java.awt.Color,\ int)
comment46.text=gets\ nameOf(\ )\ \ [currentPlayerName]
comment47.params=aBoard
comment47.target=void\ drawCurrentDice(Board)
comment47.text=\n\ Driver,\ organizes\ data\ and\ color\ before\ calling\ general\ purpose\ "drawDice"\n\ [\ ]For\ formal\ game\ start\ we\ would\ want\ to\ draw\ one\ black\ die\ and\ one\ white\ die.\n
comment48.params=aBoard\ roll\ x\ y\ dicecolor\ dotcolor\ isUsed
comment48.target=void\ drawDie(Board,\ int,\ int,\ int,\ java.awt.Color,\ java.awt.Color,\ boolean)
comment48.text=\n\ Called\ by\ "drawCurrentDice(\ )"\n\ x,y\ specify\ the\ upper\ left\ corner\ of\ the\ die\ image\n\ note\:\ gBuffer\ is\ Graphics2D\n\ @param\ roll\ might\ be\ 0\ (Dice.UNROLLED),\ in\ which\ case\ draw\ blank\ face\ die\n
comment49.params=aBoard\ x\ y\ point_color
comment49.target=void\ drawTriangle(Board,\ int,\ int,\ int)
comment49.text=\n\ drawTriangle\:\ Draws\ a\ triangle\ with\ the\ point\ facing\ downward,\ \n\ x,y\ gives\ left\ corner\ coordinates\ and\ a\ number\ for\ color.\n\ Draws\ red\ border\ around\ a\ selected\ point.\n\ uses\:\ status,\ gBuffer,\ selectedPointLoc\ \n
comment5.params=aBoard\ playerColor
comment5.target=void\ forfeitTurn(Board,\ Player)
comment5.text=\n\ Forfeit\ the\ current\ player's\ turn.\n\ Is\ called\ by\ Board,\ so\ can't\ be\ private.\n
comment50.params=aBoard\ x\ y\ point_color
comment50.target=void\ drawTriangleRev(Board,\ int,\ int,\ int)
comment50.text=\n\ drawTriangleRev\:\ Draws\ a\ triangle\ with\ the\ point\ facing\ upward,\n\ x,y\ gives\ left\ corner\ coordinates\ and\ a\ number\ for\ color.\n\ If\ a\ point\ on\ the\ gui\ board\ is\ "selected"\ by\ mouse,\ selectedPointLoc\ gets\n\ drawn\ with\ red\ border.\ (Sometimes?)\n\ uses\:\ status,\ gBuffer,\ selectedPointLoc\ \n
comment51.params=aBoard
comment51.target=void\ drawBoard(Board)
comment51.text=\n\ Draws\ the\ Game\ board\ onto\ the\ buffer\n
comment52.params=
comment52.target=void\ drawNumbersOnPoints()
comment53.params=aBoard
comment53.target=void\ drawBar(Board)
comment53.text=drawNumbersOnPoints
comment54.params=aBoard
comment54.target=void\ drawBlots(Board)
comment54.text=\n\ Draw\ all\ blots\ of\ current\ board.\ If\ more\ than\ 5\ are\ on\ a\ point,\n\ just\ draw\ the\ first\ 5\ and\ show\ a\ number\ of\ how\ many\ are\ actually\ there.\n
comment55.params=point_x\ point_y
comment55.target=int\ getPointNum(int,\ int)
comment55.text=\n\ This\ seems\ to\ figure\ out\ which\ point\ on\ display\ board\ is\ touched\ by\ the\ \n\ x,y\ int\ coordinates.\n\ Might\ be\ bar,\ and\ in\ that\ case\ I\ have\ to\ know\ who\ the\ current\ player\ is.\n
comment56.params=msg\ data
comment56.target=void\ debug_data(java.lang.String,\ int)
comment57.params=aBoard
comment57.target=void\ resetGame(Board)
comment57.text=\n\ Set\ up\ a\ new\ game\n
comment6.params=aBoard\ playerColor
comment6.target=boolean\ checkWin(Board,\ Player)
comment6.text=\n\ Checks\ if\ there\ is\ a\ winner\n\ If\ there\ is\ one,\ displays\ appropriate\ message.\n\ Return\ true\ if\ there\ was\ a\ winner,\ false\ otherwise\n
comment7.params=aBoard\ playerColor
comment7.target=void\ doRoll(Board,\ Player)
comment7.text=\ \n\ Roll\ the\ dice\ for\ the\ current\ player.\n\ If\ current\ player\ is\ on\ the\ bar\ then\ this\ calls\ "aBoard.selectABar(\ )"\n\ If\ the\ current\ player\ can't\ move,\ this\ calls\ "Game.forfeitTurn(\ )"\n\ This\ is\ stronger\ than\ merely\ telling\ a\ board's\ dice\ to\ roll,\ which\ doesn't\n\ check\ for\ bar\ nor\ canMove\n\ \n\ [\ ]This\ is\ smarter\ than\ Board.roll.\ Should\ Board.roll(\ )\ get\ its\ brains?\ \n
comment8.params=aBoard\ playerColor
comment8.target=void\ changePlayerFrom(Board,\ Player)
comment8.text=\n\ This\ could\ selectA\ more\ than\ 2\ players\ with\ slight\ modification...\n\ is\ caller\ also\ doing\ startTurn??\n\ This\ is\ a\ toggle\:\ shouldn't\ it\ get\ a\ parameter?\n
comment9.params=aBoard\ playerColor\ additionalMessage
comment9.target=void\ endTurn(Board,\ Player,\ java.lang.String)
comment9.text=\n\ End\ the\ current\ player's\ turn\ and\ start\ the\ turn\n\ of\ the\ other\ player.\n\ Perhaps\ redundant\ that\ "currentPlayer"\ is\ specified\ ...\n\ Is\ called\ by\ Board,\ so\ it\ can't\ be\ private.\n\ Calls\ startTurn(\ ),\ which\ sets\ \ "fButton[btn_RollDice].setEnabled(true);"\n
numComments=58
